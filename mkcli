#!/usr/bin/env bash
set -euo pipefail
CONFIG_FILE="${MKCLI_CONFIG:-$HOME/.config/mkcli/config}"
REG_USER="${MKCLI_REGISTRY:-$HOME/.config/mkcli/registry}"
LINK_DIR="${MKCLI_LINK_DIR:-/usr/local/bin}"

mkdir -p "$(dirname "$REG_USER")"
mkdir -p "$(dirname "$CONFIG_FILE")"
touch "$CONFIG_FILE"

# Set default log level if not set in config
if [ -s "$CONFIG_FILE" ]; then
    if ! grep -q "^MKCLI_LOG_LEVEL=" "$CONFIG_FILE"; then
        echo "MKCLI_LOG_LEVEL=minimal" >> "$CONFIG_FILE"
    fi
else
    echo "MKCLI_LOG_LEVEL=minimal" > "$CONFIG_FILE"
fi

# Ensure config file is readable and not world-writable
chmod 600 "$CONFIG_FILE"

# Validate config: only allow simple KEY=VALUE assignments
if grep -q -v -E '^[[:space:]]*$|^[[:space:]]*#|^[[:alpha:]_][[:alnum:]_]*=[^;&|$()<>`]*$' "$CONFIG_FILE"; then
  echo "Error: invalid entries in config file (only KEY=VALUE allowed)" >&2
  exit 1
fi

# Load config
. "$CONFIG_FILE"

# resolve actual script directory even when invoked via symlink
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
    DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
VERSION="$(cat "$SCRIPT_DIR/VERSION")"
. "$SCRIPT_DIR/lib/ui.sh"
. "$SCRIPT_DIR/lib/registry.sh"
. "$SCRIPT_DIR/lib/link.sh"
. "$SCRIPT_DIR/lib/parse.sh"

lookup_dir() {
    registry_lookup "$1"
}

exec_make() {
    dir="$1"
    shift
    debug "running 'make $*' in '$dir'"
    if [ "${MKCLI_DIRENV-}" != "0" ] && [ -f "$dir/.envrc" ] && command -v direnv >/dev/null; then
        debug "using direnv"
        exec direnv exec "$dir" make -C "$dir" "$@"
    else
        exec make -C "$dir" "$@"
    fi
}

alias_dispatch() {
    local alias_name="$(basename "$0")"
    local dir="$(lookup_dir "$alias_name")"
    if [ -z "$dir" ]; then
        fail "unknown alias $alias_name"
    fi

    # dispatch command
    case "${1-}" in
    "" | help | --help)
        title "$alias_name - targets"
        info "usage: $alias_name <target> [args]"
        echo
        info "available targets"
        if grep -q -E '^help:' "$dir/Makefile"; then
            exec_make "$dir" help
        else
            parse_list_targets "$dir" | table
        fi
        exit 0
        ;;
    --list-targets)
        parse_list_targets "$dir"
        exit 0
        ;;
    esac

    # execute cmd 
    exec_make "$dir" "$@"
}

cmd_add() {
    [ $# -eq 2 ] || {
        fail "usage: mkcli add <alias> <path>"
    }

    # parse arguments
    local alias_name="$1"
    
    # Check for conflicts with shell builtins or keywords
    local type_info
    type_info=$(type -t "$alias_name" 2>/dev/null || true)
    if [ "$type_info" = "builtin" ] || [ "$type_info" = "keyword" ]; then
        fail "'$alias_name' is a shell $type_info and cannot be used as an alias."
    fi

    local abs_path="$(realpath "$2")"
    [ -f "$abs_path/Makefile" ] || {
        fail "Makefile not found in $abs_path"
    }

    # check if alias already exists
    if [ -n "$(registry_lookup "$alias_name")" ]; then
        confirm "Alias '$alias_name' already exists, override?" || exit 1
        registry_delete "$alias_name"
    fi

    # add to PATH
    info "adding to PATH"
    link_create "$alias_name" "$(realpath "$0")"
    registry_write "$alias_name" "$abs_path" "$VERSION"

    # success
    ok "$alias_name registered $abs_path"
}

cmd_list() {
    # info
    info "listing aliases"
    info "structure:   <alias>   <path>   <version*>    - note: version = version of mkcli at time of alias registration"
    
    # list aliases
    registry_list | table
}

cmd_remove() {
    [ $# -eq 1 ] || {
        fail "usage: mkcli remove <alias>"
    }
    local alias_name="$1"

    # check if alias exists
    if [ -z "$(registry_lookup "$alias_name")" ]; then
        fail "alias not found"
    fi

    # check if alias is a symlink
    local dst="$LINK_DIR/$alias_name"
    if [ -e "$dst" ]; then
        if [ -L "$dst" ]; then
            local target="$(readlink "$dst")"
            if [ "$target" != "$(realpath "$0")" ]; then
                fail "$dst points elsewhere"
            fi
        else
            fail "$dst is not a symlink"
        fi
    fi

    # remove from PATH
    confirm "Remove alias '$alias_name'?" || exit 1
    link_remove "$alias_name" "$(realpath "$0")"

    # remove from registry
    registry_delete "$alias_name"

    # success
    ok "Alias '$alias_name' removed."
}

cmd_mode_help() {
    # overwrite log level
    local original_log_level="${MKCLI_LOG_LEVEL-minimal}"
    trap "export MKCLI_LOG_LEVEL=$original_log_level" RETURN
    export MKCLI_LOG_LEVEL=info

    # mode help info
    info "usage: mkcli mode <minimal|info|debug>"
    info "current mode: $original_log_level"
}

cmd_mode() {
    [ $# -eq 1 ] || { cmd_mode_help; exit 0; }

    # set log level
    local level="$1"
    case "$level" in
    minimal | info | debug)
        sed "s/MKCLI_LOG_LEVEL=.*/MKCLI_LOG_LEVEL=$level/" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

        # success
        ok "log level set to $level"
        ;;
    *)
        # failure
        fail "invalid log level: $level"
        ;;
    esac
}

show_help() {
    local original_log_level="${MKCLI_LOG_LEVEL-minimal}"
    trap "export MKCLI_LOG_LEVEL=$original_log_level" RETURN
    export MKCLI_LOG_LEVEL=info

    title "mkcli $VERSION"
    info "usage: mkcli <command> [options]"
    echo
    info "commands:"
    {
        printf "  add: \t\t a <alias> <path>\tadd a new Makefile project\n"
        printf "  list: \t\t ls \tlist all registered aliases\n"
        printf "  remove: \t\t rm <alias>\tremove an alias\n"
        printf "  mode: \t\t m <level>\tset log level (minimal, info, debug)\n"
    } | table
    echo
    info "options:"
    {
        printf "  --help: \t\t\t\t show this help message\n"
    } | table
    echo
    info "aliases:"
    {
        printf "  <alias> --help\tlist targets for an alias\n"
        printf "  <alias> <target> [args]\texecute a make target\n"
    } | table

    export MKCLI_LOG_LEVEL="$original_log_level"
}

main() {
    local alias_name="$(basename "$0")"
    local dir=$(lookup_dir "$alias_name")
    if [ -n "$dir" ]; then
        alias_dispatch "$@"
        exit $?
    fi

    # dispatch command
    case "${1-}" in

    # add alias
    add | a)
        shift
        cmd_add "$@"
        ;;
    
    # list aliases
    list | ls) cmd_list ;;

    # remove alias
    remove | rm)
        shift
        cmd_remove "$@"
        ;;
    mode | m)
        shift
        cmd_mode "$@"
        ;;
    -h | --help | help) show_help ;;
    "") show_help ;;
    *)
        fail "unknown command $1"
        ;;
    esac
}
main "$@"
